// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: al2.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TrainError service

func NewTrainErrorEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TrainError service

type TrainErrorService interface {
	GetError(ctx context.Context, in *TrainErrorRequest, opts ...client.CallOption) (*TrainErrorResponse, error)
	PreTrain(ctx context.Context, in *PreTrainRequest, opts ...client.CallOption) (*PreTrainResponse, error)
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
}

type trainErrorService struct {
	c    client.Client
	name string
}

func NewTrainErrorService(name string, c client.Client) TrainErrorService {
	return &trainErrorService{
		c:    c,
		name: name,
	}
}

func (c *trainErrorService) GetError(ctx context.Context, in *TrainErrorRequest, opts ...client.CallOption) (*TrainErrorResponse, error) {
	req := c.c.NewRequest(c.name, "TrainError.GetError", in)
	out := new(TrainErrorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainErrorService) PreTrain(ctx context.Context, in *PreTrainRequest, opts ...client.CallOption) (*PreTrainResponse, error) {
	req := c.c.NewRequest(c.name, "TrainError.PreTrain", in)
	out := new(PreTrainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainErrorService) GetConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "TrainError.GetConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrainError service

type TrainErrorHandler interface {
	GetError(context.Context, *TrainErrorRequest, *TrainErrorResponse) error
	PreTrain(context.Context, *PreTrainRequest, *PreTrainResponse) error
	GetConfig(context.Context, *ConfigRequest, *ConfigResponse) error
}

func RegisterTrainErrorHandler(s server.Server, hdlr TrainErrorHandler, opts ...server.HandlerOption) error {
	type trainError interface {
		GetError(ctx context.Context, in *TrainErrorRequest, out *TrainErrorResponse) error
		PreTrain(ctx context.Context, in *PreTrainRequest, out *PreTrainResponse) error
		GetConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
	}
	type TrainError struct {
		trainError
	}
	h := &trainErrorHandler{hdlr}
	return s.Handle(s.NewHandler(&TrainError{h}, opts...))
}

type trainErrorHandler struct {
	TrainErrorHandler
}

func (h *trainErrorHandler) GetError(ctx context.Context, in *TrainErrorRequest, out *TrainErrorResponse) error {
	return h.TrainErrorHandler.GetError(ctx, in, out)
}

func (h *trainErrorHandler) PreTrain(ctx context.Context, in *PreTrainRequest, out *PreTrainResponse) error {
	return h.TrainErrorHandler.PreTrain(ctx, in, out)
}

func (h *trainErrorHandler) GetConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.TrainErrorHandler.GetConfig(ctx, in, out)
}
