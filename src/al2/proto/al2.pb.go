// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: al2.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrainDict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch     int32   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	TrainLoss float32 `protobuf:"fixed32,2,opt,name=train_loss,json=trainLoss,proto3" json:"train_loss,omitempty"`
	ValidLoss float32 `protobuf:"fixed32,3,opt,name=valid_loss,json=validLoss,proto3" json:"valid_loss,omitempty"`
	TestLoss  float32 `protobuf:"fixed32,4,opt,name=test_loss,json=testLoss,proto3" json:"test_loss,omitempty"`
}

func (x *TrainDict) Reset() {
	*x = TrainDict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainDict) ProtoMessage() {}

func (x *TrainDict) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainDict.ProtoReflect.Descriptor instead.
func (*TrainDict) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{0}
}

func (x *TrainDict) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TrainDict) GetTrainLoss() float32 {
	if x != nil {
		return x.TrainLoss
	}
	return 0
}

func (x *TrainDict) GetValidLoss() float32 {
	if x != nil {
		return x.ValidLoss
	}
	return 0
}

func (x *TrainDict) GetTestLoss() float32 {
	if x != nil {
		return x.TestLoss
	}
	return 0
}

type TrainErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrainErrorRequest) Reset() {
	*x = TrainErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainErrorRequest) ProtoMessage() {}

func (x *TrainErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainErrorRequest.ProtoReflect.Descriptor instead.
func (*TrainErrorRequest) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{1}
}

func (x *TrainErrorRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *TrainErrorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TrainErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainDict []*TrainDict `protobuf:"bytes,1,rep,name=train_dict,json=trainDict,proto3" json:"train_dict,omitempty"`
}

func (x *TrainErrorResponse) Reset() {
	*x = TrainErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainErrorResponse) ProtoMessage() {}

func (x *TrainErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainErrorResponse.ProtoReflect.Descriptor instead.
func (*TrainErrorResponse) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{2}
}

func (x *TrainErrorResponse) GetTrainDict() []*TrainDict {
	if x != nil {
		return x.TrainDict
	}
	return nil
}

type PreTrainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode     string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Dataset  string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Batch    int32  `protobuf:"varint,3,opt,name=batch,proto3" json:"batch,omitempty"`
	Attnprob string `protobuf:"bytes,4,opt,name=attnprob,proto3" json:"attnprob,omitempty"`
	Freq     string `protobuf:"bytes,5,opt,name=freq,proto3" json:"freq,omitempty"`
	SeqLen   int32  `protobuf:"varint,6,opt,name=seq_len,json=seqLen,proto3" json:"seq_len,omitempty"`
	PredLen  int32  `protobuf:"varint,7,opt,name=pred_len,json=predLen,proto3" json:"pred_len,omitempty"`
	Path     string `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PreTrainRequest) Reset() {
	*x = PreTrainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTrainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTrainRequest) ProtoMessage() {}

func (x *PreTrainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTrainRequest.ProtoReflect.Descriptor instead.
func (*PreTrainRequest) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{3}
}

func (x *PreTrainRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *PreTrainRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *PreTrainRequest) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *PreTrainRequest) GetAttnprob() string {
	if x != nil {
		return x.Attnprob
	}
	return ""
}

func (x *PreTrainRequest) GetFreq() string {
	if x != nil {
		return x.Freq
	}
	return ""
}

func (x *PreTrainRequest) GetSeqLen() int32 {
	if x != nil {
		return x.SeqLen
	}
	return 0
}

func (x *PreTrainRequest) GetPredLen() int32 {
	if x != nil {
		return x.PredLen
	}
	return 0
}

func (x *PreTrainRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PreTrainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Statu int32  `protobuf:"varint,2,opt,name=statu,proto3" json:"statu,omitempty"`
}

func (x *PreTrainResponse) Reset() {
	*x = PreTrainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTrainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTrainResponse) ProtoMessage() {}

func (x *PreTrainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTrainResponse.ProtoReflect.Descriptor instead.
func (*PreTrainResponse) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{4}
}

func (x *PreTrainResponse) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *PreTrainResponse) GetStatu() int32 {
	if x != nil {
		return x.Statu
	}
	return 0
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model           string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Data            string  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RootPath        string  `protobuf:"bytes,3,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	DataPath        string  `protobuf:"bytes,4,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	Features        string  `protobuf:"bytes,5,opt,name=features,proto3" json:"features,omitempty"`
	Target          string  `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	Freq            string  `protobuf:"bytes,7,opt,name=freq,proto3" json:"freq,omitempty"`
	SeqLen          float64 `protobuf:"fixed64,8,opt,name=seq_len,json=seqLen,proto3" json:"seq_len,omitempty"`
	LabelLen        float64 `protobuf:"fixed64,9,opt,name=label_len,json=labelLen,proto3" json:"label_len,omitempty"`
	PredLen         float64 `protobuf:"fixed64,10,opt,name=pred_len,json=predLen,proto3" json:"pred_len,omitempty"`
	EncIn           float64 `protobuf:"fixed64,11,opt,name=enc_in,json=encIn,proto3" json:"enc_in,omitempty"`
	DecIn           float64 `protobuf:"fixed64,12,opt,name=dec_in,json=decIn,proto3" json:"dec_in,omitempty"`
	COut            float64 `protobuf:"fixed64,13,opt,name=c_out,json=cOut,proto3" json:"c_out,omitempty"`
	DModel          float64 `protobuf:"fixed64,14,opt,name=d_model,json=dModel,proto3" json:"d_model,omitempty"`
	NHeads          float64 `protobuf:"fixed64,15,opt,name=n_heads,json=nHeads,proto3" json:"n_heads,omitempty"`
	ELayers         float64 `protobuf:"fixed64,16,opt,name=e_layers,json=eLayers,proto3" json:"e_layers,omitempty"`
	DLayers         float64 `protobuf:"fixed64,17,opt,name=d_layers,json=dLayers,proto3" json:"d_layers,omitempty"`
	SLayers         []int32 `protobuf:"varint,18,rep,packed,name=s_layers,json=sLayers,proto3" json:"s_layers,omitempty"`
	DFf             float64 `protobuf:"fixed64,19,opt,name=d_ff,json=dFf,proto3" json:"d_ff,omitempty"`
	Factor          float64 `protobuf:"fixed64,20,opt,name=factor,proto3" json:"factor,omitempty"`
	Padding         float64 `protobuf:"fixed64,21,opt,name=padding,proto3" json:"padding,omitempty"`
	Distil          bool    `protobuf:"varint,22,opt,name=distil,proto3" json:"distil,omitempty"`
	Dropout         float64 `protobuf:"fixed64,23,opt,name=dropout,proto3" json:"dropout,omitempty"`
	Attn            string  `protobuf:"bytes,24,opt,name=attn,proto3" json:"attn,omitempty"`
	Embed           string  `protobuf:"bytes,25,opt,name=embed,proto3" json:"embed,omitempty"`
	Activation      string  `protobuf:"bytes,26,opt,name=activation,proto3" json:"activation,omitempty"`
	OutputAttention bool    `protobuf:"varint,27,opt,name=output_attention,json=outputAttention,proto3" json:"output_attention,omitempty"`
	DoPredict       bool    `protobuf:"varint,28,opt,name=do_predict,json=doPredict,proto3" json:"do_predict,omitempty"`
	Mix             bool    `protobuf:"varint,29,opt,name=mix,proto3" json:"mix,omitempty"`
	Cols            string  `protobuf:"bytes,30,opt,name=cols,proto3" json:"cols,omitempty"`
	NumWorkers      float64 `protobuf:"fixed64,31,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty"`
	Itr             float64 `protobuf:"fixed64,32,opt,name=itr,proto3" json:"itr,omitempty"`
	TrainEpochs     float64 `protobuf:"fixed64,33,opt,name=train_epochs,json=trainEpochs,proto3" json:"train_epochs,omitempty"`
	BatchSize       float64 `protobuf:"fixed64,34,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Patience        float64 `protobuf:"fixed64,35,opt,name=patience,proto3" json:"patience,omitempty"`
	LearningRate    float64 `protobuf:"fixed64,36,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	Des             string  `protobuf:"bytes,37,opt,name=des,proto3" json:"des,omitempty"`
	Loss            string  `protobuf:"bytes,38,opt,name=loss,proto3" json:"loss,omitempty"`
	Lradj           string  `protobuf:"bytes,39,opt,name=lradj,proto3" json:"lradj,omitempty"`
	UseAmp          bool    `protobuf:"varint,40,opt,name=use_amp,json=useAmp,proto3" json:"use_amp,omitempty"`
	Inverse         bool    `protobuf:"varint,41,opt,name=inverse,proto3" json:"inverse,omitempty"`
	UseGpu          bool    `protobuf:"varint,42,opt,name=use_gpu,json=useGpu,proto3" json:"use_gpu,omitempty"`
	UseMultiGpu     bool    `protobuf:"varint,43,opt,name=use_multi_gpu,json=useMultiGpu,proto3" json:"use_multi_gpu,omitempty"`
	Devices         string  `protobuf:"bytes,44,opt,name=devices,proto3" json:"devices,omitempty"`
	DetailFreq      string  `protobuf:"bytes,45,opt,name=detail_freq,json=detailFreq,proto3" json:"detail_freq,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_al2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_al2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_al2_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ConfigResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ConfigResponse) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

func (x *ConfigResponse) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *ConfigResponse) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *ConfigResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ConfigResponse) GetFreq() string {
	if x != nil {
		return x.Freq
	}
	return ""
}

func (x *ConfigResponse) GetSeqLen() float64 {
	if x != nil {
		return x.SeqLen
	}
	return 0
}

func (x *ConfigResponse) GetLabelLen() float64 {
	if x != nil {
		return x.LabelLen
	}
	return 0
}

func (x *ConfigResponse) GetPredLen() float64 {
	if x != nil {
		return x.PredLen
	}
	return 0
}

func (x *ConfigResponse) GetEncIn() float64 {
	if x != nil {
		return x.EncIn
	}
	return 0
}

func (x *ConfigResponse) GetDecIn() float64 {
	if x != nil {
		return x.DecIn
	}
	return 0
}

func (x *ConfigResponse) GetCOut() float64 {
	if x != nil {
		return x.COut
	}
	return 0
}

func (x *ConfigResponse) GetDModel() float64 {
	if x != nil {
		return x.DModel
	}
	return 0
}

func (x *ConfigResponse) GetNHeads() float64 {
	if x != nil {
		return x.NHeads
	}
	return 0
}

func (x *ConfigResponse) GetELayers() float64 {
	if x != nil {
		return x.ELayers
	}
	return 0
}

func (x *ConfigResponse) GetDLayers() float64 {
	if x != nil {
		return x.DLayers
	}
	return 0
}

func (x *ConfigResponse) GetSLayers() []int32 {
	if x != nil {
		return x.SLayers
	}
	return nil
}

func (x *ConfigResponse) GetDFf() float64 {
	if x != nil {
		return x.DFf
	}
	return 0
}

func (x *ConfigResponse) GetFactor() float64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *ConfigResponse) GetPadding() float64 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *ConfigResponse) GetDistil() bool {
	if x != nil {
		return x.Distil
	}
	return false
}

func (x *ConfigResponse) GetDropout() float64 {
	if x != nil {
		return x.Dropout
	}
	return 0
}

func (x *ConfigResponse) GetAttn() string {
	if x != nil {
		return x.Attn
	}
	return ""
}

func (x *ConfigResponse) GetEmbed() string {
	if x != nil {
		return x.Embed
	}
	return ""
}

func (x *ConfigResponse) GetActivation() string {
	if x != nil {
		return x.Activation
	}
	return ""
}

func (x *ConfigResponse) GetOutputAttention() bool {
	if x != nil {
		return x.OutputAttention
	}
	return false
}

func (x *ConfigResponse) GetDoPredict() bool {
	if x != nil {
		return x.DoPredict
	}
	return false
}

func (x *ConfigResponse) GetMix() bool {
	if x != nil {
		return x.Mix
	}
	return false
}

func (x *ConfigResponse) GetCols() string {
	if x != nil {
		return x.Cols
	}
	return ""
}

func (x *ConfigResponse) GetNumWorkers() float64 {
	if x != nil {
		return x.NumWorkers
	}
	return 0
}

func (x *ConfigResponse) GetItr() float64 {
	if x != nil {
		return x.Itr
	}
	return 0
}

func (x *ConfigResponse) GetTrainEpochs() float64 {
	if x != nil {
		return x.TrainEpochs
	}
	return 0
}

func (x *ConfigResponse) GetBatchSize() float64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ConfigResponse) GetPatience() float64 {
	if x != nil {
		return x.Patience
	}
	return 0
}

func (x *ConfigResponse) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

func (x *ConfigResponse) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *ConfigResponse) GetLoss() string {
	if x != nil {
		return x.Loss
	}
	return ""
}

func (x *ConfigResponse) GetLradj() string {
	if x != nil {
		return x.Lradj
	}
	return ""
}

func (x *ConfigResponse) GetUseAmp() bool {
	if x != nil {
		return x.UseAmp
	}
	return false
}

func (x *ConfigResponse) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *ConfigResponse) GetUseGpu() bool {
	if x != nil {
		return x.UseGpu
	}
	return false
}

func (x *ConfigResponse) GetUseMultiGpu() bool {
	if x != nil {
		return x.UseMultiGpu
	}
	return false
}

func (x *ConfigResponse) GetDevices() string {
	if x != nil {
		return x.Devices
	}
	return ""
}

func (x *ConfigResponse) GetDetailFreq() string {
	if x != nil {
		return x.DetailFreq
	}
	return ""
}

var File_al2_proto protoreflect.FileDescriptor

var file_al2_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x6c, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x6c, 0x32,
	0x22, 0x7c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x3d,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x44, 0x69, 0x63, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x69,
	0x63, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x6e, 0x70, 0x72, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x6e, 0x70, 0x72, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x71, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71,
	0x4c, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x3a, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x75, 0x22, 0x29,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa1, 0x09, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4c, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x63,
	0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x64, 0x65, 0x63, 0x49, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x11, 0x0a, 0x04, 0x64, 0x5f, 0x66, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64,
	0x46, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64,
	0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6f, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x6f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x74, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x69, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x72, 0x61, 0x64, 0x6a, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x72, 0x61,
	0x64, 0x6a, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x70, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x41, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x70, 0x75,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x47, 0x70, 0x75, 0x12, 0x22,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x67, 0x70, 0x75, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47,
	0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x32, 0xbe, 0x01,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x50, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x6c, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x6c, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x61, 0x6c, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_al2_proto_rawDescOnce sync.Once
	file_al2_proto_rawDescData = file_al2_proto_rawDesc
)

func file_al2_proto_rawDescGZIP() []byte {
	file_al2_proto_rawDescOnce.Do(func() {
		file_al2_proto_rawDescData = protoimpl.X.CompressGZIP(file_al2_proto_rawDescData)
	})
	return file_al2_proto_rawDescData
}

var file_al2_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_al2_proto_goTypes = []interface{}{
	(*TrainDict)(nil),          // 0: al2.TrainDict
	(*TrainErrorRequest)(nil),  // 1: al2.TrainErrorRequest
	(*TrainErrorResponse)(nil), // 2: al2.TrainErrorResponse
	(*PreTrainRequest)(nil),    // 3: al2.PreTrainRequest
	(*PreTrainResponse)(nil),   // 4: al2.PreTrainResponse
	(*ConfigRequest)(nil),      // 5: al2.ConfigRequest
	(*ConfigResponse)(nil),     // 6: al2.ConfigResponse
}
var file_al2_proto_depIdxs = []int32{
	0, // 0: al2.TrainErrorResponse.train_dict:type_name -> al2.TrainDict
	1, // 1: al2.TrainError.GetError:input_type -> al2.TrainErrorRequest
	3, // 2: al2.TrainError.PreTrain:input_type -> al2.PreTrainRequest
	5, // 3: al2.TrainError.GetConfig:input_type -> al2.ConfigRequest
	2, // 4: al2.TrainError.GetError:output_type -> al2.TrainErrorResponse
	4, // 5: al2.TrainError.PreTrain:output_type -> al2.PreTrainResponse
	6, // 6: al2.TrainError.GetConfig:output_type -> al2.ConfigResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_al2_proto_init() }
func file_al2_proto_init() {
	if File_al2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_al2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainDict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTrainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTrainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_al2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_al2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_al2_proto_goTypes,
		DependencyIndexes: file_al2_proto_depIdxs,
		MessageInfos:      file_al2_proto_msgTypes,
	}.Build()
	File_al2_proto = out.File
	file_al2_proto_rawDesc = nil
	file_al2_proto_goTypes = nil
	file_al2_proto_depIdxs = nil
}
